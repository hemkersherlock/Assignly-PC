{
  "entities": {
    "User": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "User",
      "type": "object",
      "description": "Represents a user of the Assignly application, storing their role, quota, and activity information.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the User entity."
        },
        "email": {
          "type": "string",
          "description": "Email address of the user.",
          "format": "email"
        },
        "role": {
          "type": "string",
          "description": "Role of the user (student or admin)."
        },
        "pageQuota": {
          "type": "number",
          "description": "Number of pages the user is allowed per month."
        },
        "quotaLastReplenished": {
          "type": "string",
          "description": "Timestamp of the last time the user's quota was replenished.",
          "format": "date-time"
        },
        "totalOrdersPlaced": {
          "type": "number",
          "description": "Total number of orders placed by the user."
        },
        "totalPagesUsed": {
          "type": "number",
          "description": "Total number of pages used by the user."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the user was created.",
          "format": "date-time"
        },
        "isActive": {
          "type": "boolean",
          "description": "Indicates whether the user account is active."
        },
        "paymentStatus": {
          "type": "string",
          "description": "Payment status of the user (paid, pending, or overdue)."
        },
        "lastPaymentDate": {
          "type": "string",
          "description": "Timestamp of the user's last payment.",
          "format": "date-time"
        },
        "amountPaid": {
          "type": "number",
          "description": "Total amount paid by the user."
        }
      },
      "required": [
        "id",
        "email",
        "role",
        "pageQuota",
        "quotaLastReplenished",
        "totalOrdersPlaced",
        "totalPagesUsed",
        "createdAt",
        "isActive",
        "paymentStatus"
      ]
    },
    "Order": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Order",
      "type": "object",
      "description": "Represents an order placed by a student for document transformation.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Order entity."
        },
        "studentId": {
          "type": "string",
          "description": "Reference to User. (Relationship: User 1:N Order)"
        },
        "studentEmail": {
          "type": "string",
          "description": "Email address of the student who placed the order.",
          "format": "email"
        },
        "originalFileName": {
          "type": "string",
          "description": "Name of the original file uploaded by the student."
        },
        "originalFileUrl": {
          "type": "string",
          "description": "URL of the original file stored in Firebase Storage.",
          "format": "uri"
        },
        "googleDriveFileId": {
          "type": "string",
          "description": "ID of the file in Google Drive, if imported from there."
        },
        "pageCount": {
          "type": "number",
          "description": "Number of pages in the document."
        },
        "status": {
          "type": "string",
          "description": "Status of the order (pending, in_progress, completed)."
        },
        "completedFileUrl": {
          "type": "string",
          "description": "URL of the completed file in Firebase Storage.",
          "format": "uri"
        },
        "completedGoogleDriveId": {
          "type": "string",
          "description": "ID of the completed file in Google Drive, if exported there."
        },
        "createdAt": {
          "type": "string",
          "description": "Timestamp of when the order was created.",
          "format": "date-time"
        },
        "startedAt": {
          "type": "string",
          "description": "Timestamp of when the order was started (admin marked in progress).",
          "format": "date-time"
        },
        "completedAt": {
          "type": "string",
          "description": "Timestamp of when the order was completed.",
          "format": "date-time"
        },
        "turnaroundTimeHours": {
          "type": "number",
          "description": "Turnaround time in hours for the order."
        },
        "notes": {
          "type": "string",
          "description": "Notes added by the admin for the order."
        }
      },
      "required": [
        "id",
        "studentId",
        "studentEmail",
        "originalFileName",
        "originalFileUrl",
        "pageCount",
        "status",
        "createdAt"
      ]
    },
    "Analytics": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "Analytics",
      "type": "object",
      "description": "Represents analytics data for the application, tracked monthly or daily.",
      "properties": {
        "id": {
          "type": "string",
          "description": "Unique identifier for the Analytics entity. Document ID format: monthly_{YYYY_MM} or daily_{YYYY_MM_DD}."
        },
        "totalOrders": {
          "type": "number",
          "description": "Total number of orders."
        },
        "completedOrders": {
          "type": "number",
          "description": "Number of completed orders."
        },
        "pendingOrders": {
          "type": "number",
          "description": "Number of pending orders."
        },
        "totalPagesProcessed": {
          "type": "number",
          "description": "Total number of pages processed."
        },
        "averageTurnaroundHours": {
          "type": "number",
          "description": "Average turnaround time in hours."
        },
        "activeStudents": {
          "type": "number",
          "description": "Number of active students."
        },
        "ordersReceived": {
          "type": "number",
          "description": "Number of orders received (daily only)."
        },
        "ordersCompleted": {
          "type": "number",
          "description": "Number of orders completed (daily only)."
        },
        "pagesProcessed": {
          "type": "number",
          "description": "Number of pages processed (daily only)."
        }
      },
      "required": [
        "id"
      ]
    }
  },
  "auth": {
    "providers": [
      "password",
      "anonymous"
    ]
  },
  "firestore": {
    "structure": [
      {
        "path": "/users/{userId}",
        "definition": {
          "entityName": "User",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Stores user data.  Only the user or an admin can read. Only admins can write.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user."
            }
          ]
        }
      },
      {
        "path": "/users/{userId}/orders/{orderId}",
        "definition": {
          "entityName": "Order",
          "schema": {
            "$ref": "#/backend/entities/Order"
          },
          "description": "Stores order data for a specific user. Includes denormalized 'studentId' for authorization independence.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the user who placed the order."
            },
            {
              "name": "orderId",
              "description": "The unique identifier of the order."
            }
          ]
        }
      },
      {
        "path": "/analytics/{analyticsId}",
        "definition": {
          "entityName": "Analytics",
          "schema": {
            "$ref": "#/backend/entities/Analytics"
          },
          "description": "Stores analytics data. Only admins can read and write.",
          "params": [
            {
              "name": "analyticsId",
              "description": "The unique identifier for the analytics document (monthly_{YYYY_MM} or daily_{YYYY_MM_DD})."
            }
          ]
        }
      },
      {
        "path": "/roles_admin/{userId}",
        "definition": {
          "entityName": "AdminRole",
          "schema": {
            "$ref": "#/backend/entities/User"
          },
          "description": "Indicates if a user is an admin. Existence of document grants admin privileges.",
          "params": [
            {
              "name": "userId",
              "description": "The unique identifier of the admin user."
            }
          ]
        }
      }
    ],
    "reasoning": "The Firestore structure is designed to balance security, scalability, and ease of querying, adhering to the principles of Authorization Independence, Structural Segregation, and Access Modeling.  \n\n*   **Users (Private Data):** User data is stored in `/users/{userId}`. This path-based ownership ensures that only the user or an admin can access the specific user's data. Admins can access user documents based on a global admin role (existence of a document in `/roles_admin/{uid}`).\n*   **Orders (User-Owned Data):** Orders are stored in a subcollection `/users/{userId}/orders/{orderId}`.  This structure enforces path-based ownership. Each order document includes a denormalized `studentId` to maintain authorization independence. This denormalization allows security rules to validate order creation requests against the authenticated user's ID (`request.auth.uid`) without needing to perform a `get()` operation to verify ownership. This design supports the QAP of listing a user's orders securely.\n*   **Analytics (Global Data):** Analytics data is stored in the `/analytics/{analyticsId}` collection. This data can be read and written only by admins, as defined by the existence of a document in `/roles_admin/{uid}`.  The `analyticsId` follows a predictable naming convention (`monthly_{YYYY_MM}` or `daily_{YYYY_MM_DD}`).\n\n**Authorization Independence:**\nAuthorization Independence is achieved through denormalization. Specifically, the `orders` subcollection stores the `studentId` within each order document. This eliminates the need for security rules to perform `get()` operations on the parent `user` document to verify ownership when creating or accessing an order.  Instead, security rules can directly compare `request.auth.uid` with the denormalized `studentId` in the `request.resource.data` or `resource.data`.\n\n**QAPs (Rules are not Filters):**\n*   The structure enables secure listing of orders for a specific user because orders are stored in a subcollection of the user's document (`/users/{userId}/orders/{orderId}`). Security rules can easily enforce that only the authenticated user (or an admin) can list orders within their own user document. The segregation ensures that listing orders does not require filtering based on user ID, preventing potential security vulnerabilities.\n\n**Structural Segregation:**\nThe data structure ensures structural segregation by separating user-specific data (users and orders) from global data (analytics). This segregation simplifies the security rules by ensuring that each collection has a homogeneous security posture."
  }
}